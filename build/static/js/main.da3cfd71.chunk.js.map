{"version":3,"sources":["scenes/mainScene.ts","store/gameReducer.ts","store/index.ts","Game.tsx","config.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["product","worker","Worker","speed","Object","classCallCheck","this","initState","time","last_update_time","count","workers","createStore","state","arguments","length","undefined","type","objectSpread","workersCollection","push","console","log","seconds","Math","round","workersSpeedSum","map","reduce","total","num","mainScene","add","text","backgroundColor","color","fontSize","setInteractive","useHandCursor","on","store","dispatch","dt","getState","setText","Scene","IGame","config","Phaser","AUTO","width","height","parent","scene","Game","react","id","style","React","App","react_default","a","createElement","es","display","alignContent","justifyContent","flexDirection","Game_IGame","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da3cfd71.chunk.js","sourcesContent":["import store from \"../store\";\nimport { ADD_PRODUCT, ADD_TIME, ADD_WORKER, UPDATE_WORKER_WORK } from \"../store/gameReducer\";\nimport { Scene } from \"phaser\";\n\nvar product;\nvar worker;\n\nexport default class mainScene extends Scene {\n  create() {\n\n    // add product\n    product = this.add.text(\n      0,\n      0,\n      \"Add Product\",\n      {\n        backgroundColor: \"white\",\n        color: \"black\",\n        fontSize: 48\n      }\n    );\n    product.setInteractive({ useHandCursor: true });\n    product.on(\"pointerup\", () => {\n      // console.log(store.getState().time)\n      store.dispatch({\n        type: ADD_PRODUCT\n      });\n    });\n\n    // add worker\n    worker = this.add.text(\n      0,\n      50,\n      \"Add Worker\",\n      {\n        backgroundColor: \"white\",\n        color: \"black\",\n        fontSize: 48\n      }\n    );\n    worker.setInteractive({ useHandCursor: true });\n    worker.on(\"pointerup\", () => {\n      // console.log(store.getState().time)\n      store.dispatch({\n        type: ADD_WORKER\n      });\n    });\n\n    // counter\n\n    // workers\n\n  }\n\n  update(dt) {\n    store.dispatch({\n      type: ADD_TIME\n    });\n\n    if (store.getState().workers.length > 0) {\n      store.dispatch({type: UPDATE_WORKER_WORK});\n    }\n\n    product.setText('Add Product: ' + Math.round(store.getState().count));\n    worker.setText('Add Worker: ' + store.getState().workers.length);\n  }\n}\n","export const ADD_PRODUCT = \"ADD_PRODUCT\";\nexport const ADD_TIME = \"ADD_TIME\";\nexport const UPDATE_WORKER_WORK = \"UPDATE_WORKER_WORK\";\nexport const ADD_WORKER = \"ADD_WORKER\";\n\nclass Worker {\n  constructor(public speed: number) {}\n}\n\nconst initState: {\n  time: integer,\n  last_update_time: integer,\n  count: integer,\n  workers: Worker[]\n} = {\n  time: 0,\n  last_update_time: 0,\n  count: 0,\n  workers: []\n};\n\nexport const addProduct = () => ({\n  type: ADD_PRODUCT\n});\nexport const addTime = () => ({\n  type: ADD_TIME\n});\nexport const addWorker = () => ({\n  type: ADD_WORKER\n});\nexport const updateWorkerWork = () => ({\n  type: UPDATE_WORKER_WORK\n});\n\nexport const gameReducer = (\n  state = initState,\n  action: { type: string; payload?: any }\n) => {\n  // console.log(\"Action:\", action);\n  // console.log(\"Count:\", state.count);\n  switch (action.type) {\n    case ADD_PRODUCT:\n      return { ...state, count: state.count + 1 };\n\n    case ADD_TIME:\n      return { ...state, time: state.time + 1 };\n\n    case ADD_WORKER:\n      var workersCollection = state.workers;\n      workersCollection.push(new Worker(0.5));\n      console.log(workersCollection);\n      return { ...state, workers: workersCollection };\n\n    case UPDATE_WORKER_WORK:\n      let seconds = Math.round(state.time / 100);\n      // console.log(\"seconds: \" + seconds);\n      // console.log(\"last_update_time: \" + state.last_update_time);\n      let time_elapsed = seconds - state.last_update_time;\n      // console.log(\"time_elapsed: \" + time_elapsed);\n      if (time_elapsed === 0) {\n        return state;\n      }\n\n      var workersSpeedSum = state.workers\n        .map(worker => worker.speed)\n        .reduce(function(total, num){\n            return total + num\n        });\n      return {\n        ...state,\n        count: state.count + workersSpeedSum,\n        last_update_time: seconds\n      };\n\n    default:\n      return state;\n  }\n};\n","import { createStore } from \"redux\";\nimport { gameReducer } from \"./gameReducer\";\n\nexport default createStore(gameReducer);\n","import Phaser from \"phaser\";\nimport mainScene from \"./scenes/mainScene\";\n\nimport * as React from \"react\";\n\nimport { GAME_HEIGHT, GAME_WIDTH } from \"./config\";\n\nexport interface IGameProps {}\n\nexport default class IGame extends React.Component<IGameProps, any> {\n  componentDidMount() {\n    const config: GameConfig = {\n      type: Phaser.AUTO,\n      width: GAME_WIDTH,\n      height: GAME_HEIGHT,\n      parent: \"phaser-game\",\n      scene: [mainScene]\n    };\n\n    new Phaser.Game(config);\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  public render() {\n    return <div id=\"phaser-game\" style={{ backgroundColor: \"#fff\" }} />;\n  }\n}\n","export const GAME_HEIGHT = 640;\nexport const GAME_WIDTH = 800;\n","import React, { Component } from \"react\";\nimport Game from \"./Game\";\nimport Counter from \"./Counter\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./store\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div\n          style={{\n            display: \"flex\",\n            alignContent: \"center\",\n            justifyContent: \"center\",\n            flexDirection: \"row\",\n            height: \"100vh\",\n          }}\n        >\n          <Game />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/// <reference path=\"./phaser.d.ts\"/>\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles/globals.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}