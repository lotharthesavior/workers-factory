{"version":3,"sources":["scenes/mainScene.ts","store/gameReducer.ts","store/index.ts","Game.tsx","config.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["product","worker","graphics","text","Worker","speed","timer","Object","classCallCheck","this","existentState","localStorage","getItem","initState","JSON","parse","count","workers","createStore","state","arguments","length","undefined","type","objectSpread","push","mainScene","store","subscribe","storeData","getState","storeDataFiltered","map","w","serializedState","stringify","setItem","add","backgroundColor","color","fontSize","setInteractive","useHandCursor","on","dispatch","giveTimerToWorkers","x","y","_this","filter","forEach","registerWorkersTimers","that","time","addEvent","delay","loop","callback","dt","setText","Math","round","clear","output","timerEvents","i","getProgress","toString","substr","fillStyle","fillRect","Scene","IGame","config","Phaser","AUTO","width","height","parent","scene","Game","react","id","style","React","App","react_default","a","createElement","es","display","alignContent","justifyContent","flexDirection","Game_IGame","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a13fc303.chunk.js","sourcesContent":["import store from \"../store\";\nimport { ADD_PRODUCT, ADD_WORKER } from \"../store/gameReducer\";\nimport { Scene } from \"phaser\";\n// import saveState from \"../store/localStorage\";\n\nvar product;\nvar worker;\nvar graphics;\nvar text;\n\nexport default class mainScene extends Scene {\n  create() {\n\n    // BEGIN: start store\n    store.subscribe(() => {\n      var storeData = store.getState();\n      var storeDataFiltered = {\n        count: storeData.count,\n        workers: storeData.workers.map(function(w){\n          return { speed: w.speed, timer: null };\n        })\n      };\n      const serializedState = JSON.stringify(storeDataFiltered);\n      localStorage.setItem('state', serializedState);\n    });\n\n    // END: start store\n\n\n    // BEGIN: add product\n\n    product = this.add.text(\n      0,\n      0,\n      \"Add Product\",\n      {\n        backgroundColor: \"white\",\n        color: \"black\",\n        fontSize: 48\n      }\n    );\n    product.setInteractive({ useHandCursor: true });\n    product.on(\"pointerup\", () => {\n      // console.log(store.getState().time)\n      store.dispatch({\n        type: ADD_PRODUCT\n      });\n    });\n\n    // END: add product\n\n\n    // BEGIN: add worker\n\n    worker = this.add.text(\n      0,\n      50,\n      \"Add Worker\",\n      {\n        backgroundColor: \"white\",\n        color: \"black\",\n        fontSize: 48\n      }\n    );\n    worker.setInteractive({ useHandCursor: true });\n    worker.on(\"pointerup\", () => {\n      store.dispatch({\n        type: ADD_WORKER\n      });\n    });\n\n    // END: add worker\n\n\n    // BEGIN: workers\n\n    store.subscribe(this.giveTimerToWorkers);\n    this.giveTimerToWorkers();\n\n    graphics = this.add.graphics({ x: 202, y: 120 });\n    text = this.add.text(0, 120, \"\");\n\n    // END: workers\n\n  }\n\n  giveTimerToWorkers() {\n    function filterWorkersWithTimer(worker){\n      return worker.timer === null;\n    }\n\n    store.getState().workers\n      .filter(filterWorkersWithTimer)\n      .forEach((worker) => this.registerWorkersTimers(worker, this));\n  }\n\n  registerWorkersTimers(worker, that) {\n    worker.timer = that.time.addEvent({\n      delay: 2000,\n      loop: true,\n      callback: function(){\n        store.dispatch({\n          type: ADD_PRODUCT\n        });\n      }\n    });\n  }\n\n  update(dt) {\n    let workers = store.getState().workers;\n\n    product.setText('Add Product: ' + Math.round(store.getState().count));\n    worker.setText('Add Worker: ' + workers.length);\n    graphics.clear();\n\n    var output = [];\n    let timerEvents = workers.filter( w => w.timer !== null );\n    for (var i = 0; i < timerEvents.length; i++)\n    {\n      output.push('Worker ' + (i + 1) + ': ' + timerEvents[i].timer.getProgress().toString().substr(0, 4));\n      graphics.fillStyle(\"white\", 1);\n      graphics.fillRect(0, i * 17.5, 500 * timerEvents[i].timer.getProgress(), 8);\n    }\n    text.setText(output);\n  }\n}\n","import Phaser from \"phaser\";\nimport store from \"./index\";\n\nexport const ADD_PRODUCT = \"ADD_PRODUCT\";\nexport const ADD_WORKER = \"ADD_WORKER\";\n\nclass Worker {\n  constructor(public speed: number, public timer: Phaser.Time.TimerEvent) {}\n}\n\n// BEGIN: handle initial in storage\n\nconst existentState = localStorage.getItem('state');\nvar loadedState;\nif (existentState !== null) {\n  loadedState = JSON.parse(existentState);\n} else {\n  loadedState = {\n    count: 0,\n    workers: []\n  }\n}\n\n// END: handle initial in storage\n\nconst initState: {\n  count: integer,\n  workers: Worker[]\n} = loadedState;\n\nexport const addProduct = () => ({\n  type: ADD_PRODUCT\n});\nexport const addWorker = () => ({\n  type: ADD_WORKER\n});\n\nexport const gameReducer = (\n  state = initState,\n  action: { type: string; payload?: any }\n) => {\n  // console.log(\"Action:\", action);\n  // console.log(\"Count:\", state.count);\n  switch (action.type) {\n    case ADD_PRODUCT:\n      return { ...state, count: state.count + 1 };\n\n    case ADD_WORKER:\n      var workersCollection = state.workers;\n      workersCollection.push(new Worker(0.5, null));\n      return state;\n\n    default:\n      return state;\n  }\n};\n","import { createStore } from \"redux\";\nimport { gameReducer } from \"./gameReducer\";\n\nexport default createStore(gameReducer);\n","import Phaser from \"phaser\";\nimport mainScene from \"./scenes/mainScene\";\n\nimport * as React from \"react\";\n\nimport { GAME_HEIGHT, GAME_WIDTH } from \"./config\";\n\nexport interface IGameProps {}\n\nexport default class IGame extends React.Component<IGameProps, any> {\n  componentDidMount() {\n    const config: GameConfig = {\n      type: Phaser.AUTO,\n      width: GAME_WIDTH,\n      height: GAME_HEIGHT,\n      parent: \"phaser-game\",\n      backgroundColor: '#2d2d2d',\n      scene: [mainScene]\n    };\n\n    new Phaser.Game(config);\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  public render() {\n    return <div id=\"phaser-game\" style={{ backgroundColor: \"#fff\" }} />;\n  }\n}\n","export const GAME_HEIGHT = 640;\nexport const GAME_WIDTH = 800;\n","import React, { Component } from \"react\";\nimport Game from \"./Game\";\nimport Counter from \"./Counter\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./store\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div\n          style={{\n            display: \"flex\",\n            alignContent: \"center\",\n            justifyContent: \"center\",\n            flexDirection: \"row\",\n            height: \"100vh\",\n          }}\n        >\n          <Game />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/// <reference path=\"./phaser.d.ts\"/>\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles/globals.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}